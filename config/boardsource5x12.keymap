/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>


/ {

/*         macros {
        m_all: m_all {
            compatible = "zmk,behavior-macro";
            label = "m_all";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>;
        };

        m_copy: m_copy {
            compatible = "zmk,behavior-macro";
            label = "m_copy";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
        };

        m_paste: m_paste {
            compatible = "zmk,behavior-macro";
            label = "m_paste";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
        };

        m_prev: m_prev {
            compatible = "zmk,behavior-macro";
            label = "m_prev";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(TAB))>;
        };

        m_forw: m_forw {
            compatible = "zmk,behavior-macro";
            label = "m_forw";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>;
        };
    }; */
    keymap {
        compatible = "zmk,keymap";

/*         macros {
            m_all: m_all {
                compatible = "zmk,behavior-macro";
                label = "m_all";
                #binding-cells = <0>;
                bindings = <&kp LC(A)>;
            };

            m_copy: m_copy {
                compatible = "zmk,behavior-macro";
                label = "m_copy";
                #binding-cells = <0>;
                bindings = <&kp LC(C)>;
            };

            m_paste: m_paste {
                compatible = "zmk,behavior-macro";
                label = "m_paste";
                #binding-cells = <0>;
                bindings = <&kp LC(V)>;
            };

            m_prev: m_prev {
                compatible = "zmk,behavior-macro";
                label = "m_prev";
                #binding-cells = <0>;
                bindings = <&kp LS(LC(TAB))>;
            };

            m_forw: m_forw {
                compatible = "zmk,behavior-macro";
                label = "m_forw";
                #binding-cells = <0>;
                bindings = <&kp LC(TAB)>;
            };
        }; */

/*         qwerty {
            // ------------------------------------------------------------------------------------------
            // |  all  | copy | pste | prev | forw |  NA  |   NA  |  NA   |  NA  |  NA  |   NA  | NA    |
            // |  TAB  |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
            // |  CAPS |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  '    |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |   /   | ENTER |
            // | LCTRL | WIN  | LALT | ESC  | LOWR | SPACE| SPACE |  RAIS | LARW | DARW | UARW  | RARW  |
            bindings = <
                &m_all     &m_copy      &m_paste    &m_prev  &m_forw    &none       &none       &none   &none       &none       &none       &none
                &kp TAB    &kp Q        &kp W       &kp E    &kp R      &kp T       &kp Y       &kp U   &kp I       &kp O       &kp P       &kp BSPC
                &kp CAPS   &kp A        &kp S       &kp D    &kp F      &kp G       &kp H       &kp J   &kp K       &kp L       &kp SEMI    &kp SQT
                &kp LSHFT  &kp Z        &kp X       &kp C    &kp V      &kp B       &kp N       &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp RET
                &kp LCTL   &kp LGUI     &kp LALT    &kp ESC  &mo 2      &kp SPACE   &kp SPACE   &mo 3   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT 
            >;
        };

        colemak {
            // -------------------------------------------------------------------------------------------
            // |  all  | copy | pste | prev | forw |  NA  |   NA  |  NA   |  NA  |  NA  |   NA  |  NA   |
            // |  TAB  |  Q   |  W   |  F   |  P   |  G   |   J   |   L   |  U   |  Y   |   :   |  BSPC |
            // |  BSPC |  A   |  R   |  S   |  T   |  D   |   H   |   N   |  E   |  I   |   O   |   '   |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   K   |   M   |  ,   |  .   |   /   | ENTER |
            // | LCTRL | WIN  | LALT | ESC  | LOWR | SPACE| SPACE |  RAIS | LARW | DARW | UARW  | RARW  |
            bindings = <
                &m_all     &m_copy      &m_paste    &m_prev  &m_forw    &none       &none       &none   &none       &none       &none       &none
                &kp TAB    &kp Q        &kp W       &kp F    &kp P      &kp G       &kp J       &kp L   &kp U       &kp Y       &kp SEMI    &kp BSPC
                &kp BSPC   &kp A        &kp R       &kp S    &kp T      &kp D       &kp H       &kp N   &kp E       &kp I       &kp O       &kp SQT
                &kp LSHFT  &kp Z        &kp X       &kp C    &kp V      &kp B       &kp K       &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp RET
                &kp LCTL   &kp LGUI     &kp LALT    &kp ESC  &mo 2      &kp SPACE   &kp SPACE   &mo 3   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT 
            >;
        }; */

        qwerty {
            // ------------------------------------------------------------------------------------------
            // |  all  | copy | pste | prev | forw |  NA  |   NA  |  NA   |  NA  |  NA  |   NA  | NA    |
            // |  TAB  |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
            // |  CAPS |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  '    |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |   /   | ENTER |
            // | LCTRL | WIN  | LALT | ESC  | LOWR | SPACE| SPACE |  RAIS | LARW | DARW | UARW  | RARW  |
            bindings = <
                &none     &none      &none    &none  &none    &none       &none       &none   &none       &none       &none       &none
                &kp TAB    &kp Q        &kp W       &kp E    &kp R      &kp T       &kp Y       &kp U   &kp I       &kp O       &kp P       &kp BSPC
                &kp CAPS   &kp A        &kp S       &kp D    &kp F      &kp G       &kp H       &kp J   &kp K       &kp L       &kp SEMI    &kp SQT
                &kp LSHFT  &kp Z        &kp X       &kp C    &kp V      &kp B       &kp N       &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp RET
                &kp LCTL   &kp LGUI     &kp LALT    &kp ESC  &mo 2      &kp SPACE   &kp SPACE   &mo 3   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT 
            >;
        };

        colemak {
            // -------------------------------------------------------------------------------------------
            // |  all  | copy | pste | prev | forw |  NA  |   NA  |  NA   |  NA  |  NA  |   NA  |  NA   |
            // |  TAB  |  Q   |  W   |  F   |  P   |  G   |   J   |   L   |  U   |  Y   |   :   |  BSPC |
            // |  BSPC |  A   |  R   |  S   |  T   |  D   |   H   |   N   |  E   |  I   |   O   |   '   |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   K   |   M   |  ,   |  .   |   /   | ENTER |
            // | LCTRL | WIN  | LALT | ESC  | LOWR | SPACE| SPACE |  RAIS | LARW | DARW | UARW  | RARW  |
            bindings = <
                &none     &none      &none    &none  &none    &none       &none       &none   &none       &none       &none       &none
                &kp TAB    &kp Q        &kp W       &kp F    &kp P      &kp G       &kp J       &kp L   &kp U       &kp Y       &kp SEMI    &kp BSPC
                &kp BSPC   &kp A        &kp R       &kp S    &kp T      &kp D       &kp H       &kp N   &kp E       &kp I       &kp O       &kp SQT
                &kp LSHFT  &kp Z        &kp X       &kp C    &kp V      &kp B       &kp K       &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp RET
                &kp LCTL   &kp LGUI     &kp LALT    &kp ESC  &mo 2      &kp SPACE   &kp SPACE   &mo 3   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT 
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------
            // |  NA   |  NA  |  NA  |  NA  |  NA  |  NA  |  NA   |  NA   |  NA  |  NA  |   NA  |  NA   |
            // |   ~   |  1   |  2   |  3   |  4   |  5   |  6    |   7   |  8   |  9   |   0   |  DEL  |
            // |  DEL  |  F1  |  F2  |  F3  |  F4  |  F5  |  F6   |   -   |  =   |  [   |   ]   |   \   |
            // |       |  F7  |  F8  |  F9  |  F10 |  F11 |  F12  |   #   |  |   | VOL+ |  PGUP |  HOME |
            // |       |      |      | PRNT |      |      |       | flock |      | VOL- |  PGD  |  END  |
            bindings = <
                &none     &none    &none    &none     &none     &none   &none     &none           &none           &none         &none            &none
                &kp TILDE &kp N1   &kp N2   &kp N3    &kp N4    &kp N5  &kp N6    &kp N7          &kp N8          &kp N9        &kp N0           &kp DEL
                &kp DEL   &kp F1   &kp F2   &kp F3    &kp F4    &kp F5  &kp F6    &kp MINUS       &kp EQUAL       &kp LBKT      &kp RBKT         &kp BSLH
                &trans    &kp F7   &kp F8   &kp F9    &kp F10   &kp F11 &kp F12   &kp NON_US_HASH &kp NON_US_BSLH &kp C_VOL_UP  &kp PG_UP        &kp HOME
                &trans    &trans   &trans   &kp PSCRN &trans    &tran   &trans    &mo 4           &trans          &kp C_VOL_DN  &kp PG_DN        &kp END
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------
            // |  NA  |  NA  |  NA  |  NA  |  NA   |  NA  |  NA  |  NA  |  NA  |  NA  |  NA  |    NA     |
            // |   ~  |  !   |  @   |  #   |  $    |  %   |  ^   |  &   |  *   |  7   |  8   |    9      |
            // |      |  F1  |  F2  |  F3  |  F4   |  F5  |  F6  |  _   |  +   |  4   |  5   |    6      |
            // |      |  F7  |  F8  |  F9  |  F10  |  F11 |  F12 |  NA  |  |   |  1   |  2   |    3      |
            // |      |      |      |      | flock |      |      |      |  NA  |  .   |  0   |    DEL    |
            bindings = <
                &none     &none    &none  &none    &none    &none     &none     &none     &none     &none      &none     &none 
                &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT &kp CARET &kp AMPS  &kp ASTRK &kp KP_N7  &kp KP_N8 &kp KP_N8
                &trans    &kp F1   &kp F2 &kp F3   &kp F4   &kp F5    &kp F6    &kp UNDER &kp PLUS  &kp KP_N4  &kp KP_N5 &kp KP_N6
                &trans    &kp F7   &kp F8 &kp F9   &kp F10  &kp F11   &kp F12   &none     &kp PIPE  &kp KP_N1  &kp KP_N2 &kp KP_N3
                &trans    &trans   &trans &trans   &mo 4    &trans    &trans    &trans    &trans    &kp KP_DOP &kp KP_N0 &kp DEL
            >;
        };

        flock_layer {
            // ----------------------------------------------------------------------------------------------
            // | Bootldr| VccOff |        |        |        |        |      |      |      |     |     |      |
            // | DF(col)|BT_SEL 0|BT_SEL 1|BT_SEL 2|BT_SEL 3|BT_SEL 4|BT_PRV|BT_NXT|BT_CLR|     |     |      |
            // | DF(qwe)|        |        |        |        |        |      |      |      |     |     |      |
            // |        |        |        |        |        |        |      |      |      |     |     |      |
            // |        |        |        |        |        |        |      |      |      |     |     |      |
            bindings = <
                &bootloader  &ext_power EP_TOG &trans       &trans       &trans       &trans       &trans     &trans     &trans     &trans  &trans  &trans
                &to 1        &bt BT_SEL 0      &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_PRV &bt BT_NXT &bt BT_CLR &trans  &trans  &trans
                &to 0        &trans            &trans       &trans       &trans       &trans       &trans     &trans     &trans     &trans  &trans  &trans
                &trans       &trans            &trans       &trans       &trans       &trans       &trans     &trans     &trans     &trans  &trans  &trans
                &trans       &trans            &trans       &trans       &trans       &trans       &trans     &trans     &trans     &trans  &trans  &trans
            >;
        };
    };
};